"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var path = require("path");
var affected_apps_1 = require("./affected-apps");
var fs = require("fs");
function parseFiles(args) {
    var unnamed = [];
    var named = [];
    args.forEach(function (a) {
        if (a.startsWith('--') || a.startsWith('-')) {
            named.push(a);
        }
        else {
            unnamed.push(a);
        }
    });
    var dashDashFiles = named.filter(function (a) { return a.startsWith('--files='); })[0];
    if (dashDashFiles) {
        named.splice(named.indexOf(dashDashFiles), 1);
        return { files: parseDashDashFiles(dashDashFiles), rest: unnamed.concat(named) };
    }
    else if (unnamed.length >= 2) {
        return { files: getFilesFromShash(unnamed[0], unnamed[1]), rest: unnamed.slice(2).concat(named) };
    }
    else {
        throw new Error('Invalid options provided');
    }
}
exports.parseFiles = parseFiles;
function parseDashDashFiles(dashDashFiles) {
    var f = dashDashFiles.substring(8); // remove --files=
    if (f.startsWith('"') || f.startsWith("'")) {
        f = f.substring(1, f.length - 1);
    }
    return f.split(',').map(function (f) { return f.trim(); });
}
function getFilesFromShash(sha1, sha2) {
    return child_process_1.execSync("git diff --name-only " + sha1 + " " + sha2)
        .toString('utf-8')
        .split('\n')
        .map(function (a) { return a.trim(); })
        .filter(function (a) { return a.length > 0; });
}
function getAffectedApps(touchedFiles) {
    var config = JSON.parse(fs.readFileSync('.angular-cli.json', 'utf-8'));
    var projects = (config.apps ? config.apps : []).map(function (p) {
        return {
            name: p.name,
            isApp: p.root.startsWith('apps/'),
            files: allFilesInDir(path.dirname(p.root))
        };
    });
    if (!config.project.npmScope) {
        throw new Error(".angular-cli.json must define the npmScope property.");
    }
    return affected_apps_1.affectedApps(config.project.npmScope, projects, function (f) { return fs.readFileSync(f, 'utf-8'); }, touchedFiles);
}
exports.getAffectedApps = getAffectedApps;
function getAppRoots(appNames) {
    var config = JSON.parse(fs.readFileSync('.angular-cli.json', 'utf-8'));
    return (config.apps ? config.apps : []).filter(function (p) { return appNames.indexOf(p.name) > -1; }).map(function (p) { return path.dirname(p.root); });
}
exports.getAppRoots = getAppRoots;
function allFilesInDir(dirName) {
    var res = [];
    fs.readdirSync(dirName).forEach(function (c) {
        var child = path.join(dirName, c);
        try {
            if (!fs.statSync(child).isDirectory()) {
                res.push(child);
            }
            else if (fs.statSync(child).isDirectory()) {
                res = res.concat(allFilesInDir(child));
            }
        }
        catch (e) { }
    });
    return res;
}
